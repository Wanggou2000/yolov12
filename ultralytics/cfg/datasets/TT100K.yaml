# Ultralytics üöÄ AGPL-3.0 License - https://ultralytics.com/license

# SKU-110K retail items dataset https://github.com/eg4000/SKU110K_CVPR19 by Trax Retail
# Documentation: https://docs.ultralytics.com/datasets/detect/sku-110k/
# Example usage: yolo train data=SKU-110K.yaml
# parent
# ‚îú‚îÄ‚îÄ ultralytics
# ‚îî‚îÄ‚îÄ datasets
#     ‚îî‚îÄ‚îÄ SKU-110K  ‚Üê downloads here (13.6 GB)

# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: ../datasets/TT100K # dataset root dir
train: train # train images (relative to 'path')  8219 images
val: test # val images (relative to 'path')  588 images
test: test # test images (optional)  2936 images

# Classes
names:
  0: pl80
  1: w9
  2: p6
  3: ph4.2
  4: i8
  5: w14
  6: w33
  7: pa13
  8: im
  9: w58
  10: pl90
  11: il70
  12: p5
  13: pm55
  14: pl60
  15: ip
  16: p11
  17: pdd
  18: wc
  19: i2r
  20: w30
  21: pmr
  22: p23
  23: pl15
  24: pm10
  25: pss
  26: w1
  27: p4
  28: w38
  29: w50
  30: w34
  31: pw3.5
  32: iz
  33: w39
  34: w11
  35: p1n
  36: pr70
  37: pd
  38: pnl
  39: pg
  40: ph5.3
  41: w66
  42: il80
  43: pb
  44: pbm
  45: pm5
  46: w24
  47: w67
  48: w49
  49: pm40
  50: ph4
  51: w45
  52: i4
  53: w37
  54: ph2.6
  55: pl70
  56: ph5.5
  57: i14
  58: i11
  59: p7
  60: p29
  61: pne
  62: pr60
  63: pm13
  64: ph4.5
  65: p12
  66: p3
  67: w40
  68: pl5
  69: w13
  70: pr10
  71: p14
  72: i4l
  73: pr30
  74: pw4.2
  75: w16
  76: p17
  77: ph3
  78: i9
  79: w15
  80: w35
  81: pa8
  82: pt
  83: pr45
  84: w17
  85: pl30
  86: pcs
  87: pctl
  88: pr50
  89: ph4.4
  90: pm46
  91: pm35
  92: i15
  93: pa12
  94: pclr
  95: i1
  96: pcd
  97: pbp
  98: pcr
  99: w28
  100: ps
  101: pm8
  102: w18
  103: w2
  104: w52
  105: ph2.9
  106: ph1.8
  107: pe
  108: p20
  109: w36
  110: p10
  111: pn
  112: pa14
  113: w54
  114: ph3.2
  115: p2
  116: ph2.5
  117: w62
  118: w55
  119: pw3
  120: pw4.5
  121: i12
  122: ph4.3
  123: phclr
  124: i10
  125: pr5
  126: i13
  127: w10
  128: p26
  129: w26
  130: p8
  131: w5
  132: w42
  133: il50
  134: p13
  135: pr40
  136: p25
  137: w41
  138: pl20
  139: ph4.8
  140: pnlc
  141: ph3.3
  142: w29
  143: ph2.1
  144: w53
  145: pm30
  146: p24
  147: p21
  148: pl40
  149: w27
  150: pmb
  151: pc
  152: i6
  153: pr20
  154: p18
  155: ph3.8
  156: pm50
  157: pm25
  158: i2
  159: w22
  160: w47
  161: w56
  162: pl120
  163: ph2.8
  164: i7
  165: w12
  166: pm1.5
  167: pm2.5
  168: w32
  169: pm15
  170: ph5
  171: w19
  172: pw3.2
  173: pw2.5
  174: pl10
  175: il60
  176: w57
  177: w48
  178: w60
  179: pl100
  180: pr80
  181: p16
  182: pl110
  183: w59
  184: w64
  185: w20
  186: ph2
  187: p9
  188: il100
  189: w31
  190: w65
  191: ph2.4
  192: pr100
  193: p19
  194: ph3.5
  195: pa10
  196: pcl
  197: pl35
  198: p15
  199: w7
  200: pa6
  201: phcs
  202: w43
  203: p28
  204: w6
  205: w3
  206: w25
  207: pl25
  208: il110
  209: p1
  210: w46
  211: pn-2
  212: w51
  213: w44
  214: w63
  215: w23
  216: pm20
  217: w8
  218: pmblr
  219: w4
  220: i5
  221: il90
  222: w21
  223: p27
  224: pl50
  225: pl65
  226: w61
  227: ph2.2
  228: pm2
  229: i3
  230: pa18
  231: pw4


# Download script/URL (optional) ---------------------------------------------------------------------------------------
download: |
  import shutil
  from pathlib import Path

  import numpy as np
  import pandas as pd
  from tqdm import tqdm

  from ultralytics.utils.downloads import download
  from ultralytics.utils.ops import xyxy2xywh

  # Download
  dir = Path(yaml['path'])  # dataset root dir
  parent = Path(dir.parent)  # download dir
  urls = ['http://trax-geometry.s3.amazonaws.com/cvpr_challenge/SKU110K_fixed.tar.gz']
  download(urls, dir=parent)

  # Rename directories
  if dir.exists():
      shutil.rmtree(dir)
  (parent / 'SKU110K_fixed').rename(dir)  # rename dir
  (dir / 'labels').mkdir(parents=True, exist_ok=True)  # create labels dir

  # Convert labels
  names = 'image', 'x1', 'y1', 'x2', 'y2', 'class', 'image_width', 'image_height'  # column names
  for d in 'annotations_train.csv', 'annotations_val.csv', 'annotations_test.csv':
      x = pd.read_csv(dir / 'annotations' / d, names=names).values  # annotations
      images, unique_images = x[:, 0], np.unique(x[:, 0])
      with open((dir / d).with_suffix('.txt').__str__().replace('annotations_', ''), 'w') as f:
          f.writelines(f'./images/{s}\n' for s in unique_images)
      for im in tqdm(unique_images, desc=f'Converting {dir / d}'):
          cls = 0  # single-class dataset
          with open((dir / 'labels' / im).with_suffix('.txt'), 'a') as f:
              for r in x[images == im]:
                  w, h = r[6], r[7]  # image width, height
                  xywh = xyxy2xywh(np.array([[r[1] / w, r[2] / h, r[3] / w, r[4] / h]]))[0]  # instance
                  f.write(f"{cls} {xywh[0]:.5f} {xywh[1]:.5f} {xywh[2]:.5f} {xywh[3]:.5f}\n")  # write label
